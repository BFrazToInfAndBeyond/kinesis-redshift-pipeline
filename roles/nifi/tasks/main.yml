---
  - name: create nifi system group
    group: name=nifi state=present system=yes

  - name: create nifi system user
    user: name=nifi state=present system=yes group=nifi

  - name: install java jdk8
    yum: name=java-1.8.0-openjdk-devel.x86_64 state=present

  - name: add JAVA_HOME and JRE_HOME to path
    blockinfile: |
              dest=/root/.bash_profile backup=no
              content="export JAVA_HOME={{java_home}}
                       export JRE_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.101-3.b13.el6_8.x86_64/jre/bin/java
                       PATH=$PATH:$HOME/bin:JAVA_HOME:JRE_HOME"

  - shell: source /root/.bash_profile

  - name: see if nifi package existence
    stat: path={{ nifi_download_dest }}
    register: nifi_exists

  - name: download nifi
    get_url:
      url="{{ nifi_download_url }}"
      dest="{{ nifi_download_dest }}"
    when: not nifi_exists.stat.exists

  - name: extract nifi tarball
    unarchive: src={{ nifi_download_dest }} dest=/opt copy=no owner=nifi group=nifi

  - name: template repo file
    template: src=nifi.j2 dest={{ nifi_script }} owner=nifi group=nifi mode=0755

  - name: install nifi
    command: "{{ nifi_script }} install"

  - name: restart the nifi service
    service: name=nifi state=restarted

  - name: wait for nifi to start up
    wait_for: host=127.0.0.1 port=8080 delay=10 timeout=700

########### sql workbench ##############

  - name: download redshift driver
    get_url: url=https://s3.amazonaws.com/redshift-downloads/drivers/RedshiftJDBC42-1.1.17.1017.jar dest=/root

  - name: create sql workbench home
    file: path=/opt/sql-workbench state=directory

  - name: download sql workbench
    get_url: url=http://www.sql-workbench.net/Workbench-Build121.zip dest=/root

  - name: unpack sql workbench
    unarchive: src=/root/Workbench-Build121.zip dest=/opt/sql-workbench copy=no

  - name: add create table script
    template: src=../templates/create_table.sh.j2 dest=/tmp/create_table.sh mode=0755

  - name: create redshift table  #if table already exists, error
    shell: /tmp/create_table.sh
    ignore_errors: true


##########################################

# add instantiate nifi template
  - shell: curl -X GET http://localhost:8080/nifi-api/controller/templates
    register: initial_raw_template_results

  - set_fact: initial_template_results="{{ initial_raw_template_results.stdout | from_json }}"

  - set_fact: initial_number_of_templates={{ initial_template_results.templates | length | int }}

  - block:

    - name: create the twitter kinesis nifi template
      template: src=../templates/tweets_to_kinesis.xml.j2 dest=/tmp/tweets_to_kinesis.xml

    - shell: curl -X POST -v -F template=@"/tmp/tweets_to_kinesis.xml" http://127.0.0.1:8080/nifi-api/controller/templates

    - shell: curl -X GET http://localhost:8080/nifi-api/controller/
      register: raw_controller_results

    - set_fact: controller_results="{{ raw_controller_results.stdout | from_json }}"

    - shell: curl -X GET http://localhost:8080/nifi-api/controller/templates
      register: raw_template_results

    - set_fact: template_results="{{ raw_template_results.stdout | from_json }}"

    - shell: curl -d "templateId={{template_results.templates[0].id}}" -d "originY=0" -d "originX=0" -d "clientId={{template_results.revision.clientId}}" -d "version=0" http://localhost:8080/nifi-api/controller/process-groups/{{controller_results.controller.id}}/template-instance/

    when: initial_number_of_templates | int == 0
